# This is the SAM template that represents the architecture of your serverless application
# https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/serverless-sam-template-basics.html

# The AWSTemplateFormatVersion identifies the capabilities of the template
# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/format-version-structure.html

Parameters:
  Stage:
    Type: String
    Description: Parameter for getting the deployment stage

Mappings:
  SecretNameMap:
    beta:
      SecretId: "doomscroll-beta-accesstoken"
    prod:
      SecretId: "doomscroll-accesstoken"

AWSTemplateFormatVersion: 2010-09-09
Description: >-
  doomscrollbot

# Transform section specifies one or more macros that AWS CloudFormation uses to process your template
# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/transform-section-structure.html
Transform:
- AWS::Serverless-2016-10-31

# Resources declares the AWS resources that you want to include in the stack
# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/resources-section-structure.html
Resources:  
  # This is the Lambda function definition associated with the source code: sqs-payload-logger.js. For all available properties, see
  # https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
  Doomscrollbot:
    Type: AWS::Serverless::Function
    Properties:
      Description: A Lambda function that posts to Mastodon every twelve hours
      Runtime: nodejs18.x
      Architectures:
        - x86_64
      Handler: src/handlers/scheduled-event-logger.post
      # This property associates this Lambda function with a scheduled CloudWatch Event. For all available properties, see
      # https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#schedule
      # This example runs every hour.
      Events:
        CloudWatchEvent:
          Type: Schedule
          Properties:
            Schedule: rate(12 hours)
      MemorySize: 128
      Timeout: 100
      Policies:
        - AWSSecretsManagerGetSecretValuePolicy:
            SecretArn:
              Fn::Join:
              - ""
              - - !Sub "arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:"
                - Fn::FindInMap:
                  - SecretNameMap
                  - Ref: Stage
                  - SecretId
                - "-*"
      Environment:
        Variables:
          SECRET_ID: !FindInMap
            - SecretNameMap
            - Ref: Stage
            - SecretId
